//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
//*                                                                           */
//*                  This file is part of the program and library             */
//*         SCIP --- Solving Constraint Integer Programs                      */
//*                                                                           */
//*    Copyright (C) 2002-2021 Konrad-Zuse-Zentrum                            */
//*                            fuer Informationstechnik Berlin                */
//*                                                                           */
//*  SCIP is distributed under the terms of the ZIB Academic License.         */
//*                                                                           */
//*  You should have received a copy of the ZIB Academic License              */
//*  along with SCIP; see the file COPYING. If not visit scipopt.org.         */
//*                                                                           */
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

-passes(1)

-fdc       // do not distinguish plain char as a unique type.
           // i.e. char is either signed char or unsigned char

+fzl       // make size_t long unsined int
+fzu

+libh(cplex.h) // declare CPLEX file as library
+fll           // permit long lont int

// turn off error 39 in libraries
-elib(39)

//  The following functions exhibit variable return modes.
//  That is, they may equally-usefully be called for a value
//  as called just for their effects.  Accordingly we inhibit
//  Warning 534 for these functions.
//  Feel free to add to or subtract from this list.
-esym(534,fflush,vfprintf,fgets)
-esym(534,vprintf,snprintf)
-esym(534,free_history_entry)
-esym(534,SCIPfclose,SCIPfflush,SCIPfprintf,SCIPfputc,SCIPfputs,SCIPfseek,SCIPfwrite)
-esym(754,Chunk::_rbtreenode)

-function(exit,__assertfail)

// make sure lint knows which functions are thread protected
-sem(nlpiSolveFilterSQP, thread_protected)


// turn off all errors for va_* functions:
-emacro((*),va_*)

// Avoid warnings with UINT64_MAX macro:
// It seems that lint does not work with the definition
// "# define UINT64_MAX (__UINT64_C(18446744073709551615))" in stdint.h
++dUINT64_MAX=18446744073709551615UL

// ---------------------------------------------------------
// treat particular messages:
-emacro(506,debugMessage)         // Constant value Boolean
-emacro(681,debugMessage)         // Loop is not entered
-emacro(506,debugPrintf)          // Constant value Boolean
-emacro(681,debugPrintf)          // Loop is not entered
-emacro(506,SCIPdebugMessage)     // Constant value Boolean
-emacro(681,SCIPdebugMessage)     // Loop is not entered
-emacro(506,SCIPdebugPrintf)      // Constant value Boolean
-emacro(681,SCIPdebugPrintf)      // Loop is not entered
-emacro(506,SCIPdebugMsg)         // Constant value Boolean
-emacro(681,SCIPdebugMsg)         // Loop is not entered
-emacro(530,SCIPdebugMsg)         // Symbol not initialized
-emacro(644,SCIPdebugMsg)         // Symbol may not have been initialized
-emacro(506,SCIPdebugMsgPrint)    // Constant value Boolean
-emacro(681,SCIPdebugMsgPrint)    // Loop is not entered
-emacro(530,SCIPdebugMsgPrint)    // Symbol not initialized
-emacro(644,SCIPdebugMsgPrint)    // Symbol may not have been initialized
-emacro(506,SCIPsetDebugMsg)      // Constant value Boolean
-emacro(681,SCIPsetDebugMsg)      // Loop is not entered
-emacro(530,SCIPsetDebugMsg)      // Symbol not initialized
-emacro(644,SCIPsetDebugMsg)      // Symbol may not have been initialized
-emacro(506,SCIPstatDebugMsg)     // Constant value Boolean
-emacro(681,SCIPstatDebugMsg)     // Loop is not entered
-emacro(530,SCIPstatDebugMsg)     // Symbol not initialized
-emacro(644,SCIPstatDebugMsg)     // Symbol may not have been initialized
-emacro(506,SCIPsetDebugMsgPrint) // Constant value Boolean
-emacro(681,SCIPsetDebugMsgPrint) // Loop is not entered
-emacro(530,SCIPsetDebugMsgPrint) // Symbol not initialized
-emacro(644,SCIPsetDebugMsgPrint) // Symbol may not have been initialized
-emacro(506,SCIPstatisticMessage) // Constant value Boolean
-emacro(681,SCIPstatisticMessage) // Loop is not entered
-emacro(506,SCIPstatisticPrintf)  // Constant value Boolean
-emacro(681,SCIPstatisticPrintf)  // Loop is not entered
-emacro(506,SCIPdebugCheckRow)    // Constant value Boolean
-emacro(506,SCIPdebugCheckImplic) // Constant value Boolean
-emacro(506,assert)               // Constant value Boolean
-emacro(446,SCIPsolveNlpi)        // side effect in initializer (which is not true)
-emacro(485,SCIPsolveNlpi)        // Duplicate initialization of object element
-emacro(446,SCIPsolveNLP)         // side effect in initializer (which is not true)
-emacro(485,SCIPsolveNLP)         // Duplicate initialization of object element

-emacro(506,isfinite)       // turn off all messages for isfinite
-emacro(686,isfinite)       // turn off all messages for isfinite
-emacro(736,isfinite)       // turn off all messages for isfinite
-emacro(747,isfinite)       // turn off all messages for isfinite
-emacro(866,isfinite)       // turn off all messages for isfinite

-esym(578,clock)          // Declaration of symbol hides symbol
-esym(578,scip)           // Declaration of symbol hides symbol
-esym(715,scip)           // Symbol not referenced
-esym(528,consdataPrint)  // Symbol not referenced
-esym(528,errorhandler)   // Symbol not referenced
-esym(1712,Obj*)          // Default constructor not defined for class

-esym(1740,"*::scip_")

-e537  // Repeated include file
-e631  // Tag defined differently
-e717  // do ... while(0);
-e730  // Boolean argument to function
-e731  // Boolean argument to equal/not equal
-e737  // Loss of sign in promotion from int to unsigned int
-e767  // Macro was defined differently in another module
-e770  // Tag defined identically
-e773  // Expression-like macro not parenthesized
-e793  // ANSI limit of 31 'function parameters' exceeded / ANSI limit of 8 '#include levels' exceeded
-e834  // Operator followed by operator is confusing
-e655  // Bit-wise operation uses (compatible) enum's

// The following happens quite often (and might be useful), but clutters the output
-e679  // Suspicious Truncation in arithmetic expression combining with pointer
-e451  // Header file repeatedly included but does not have a standard include guard

// temporary
-e818  // Pointer parameter could be declared as pointing to const
-e801  // Use of goto is deprecated
-e740  // Unusual pointer cast (incompatible indirect types)

// turning off the following might help to reduce output further
//-e679  // Suspicious Truncation in arithmetic expression combining with pointer
//-e507  // Size incompatibility, converting 8 byte pointer to 4 byte integral

//-e506  // Constant value Boolean
//-e534  // Ignoring return value of function
//-e713  // Loss of precision
//-e715  // Symbol not referenced
//-e774  // Boolean within 'if' always evaluates to False
//-e777  // Testing floats for equality
//-e759  // Header declaration for symbol could be moved from header to module
//-e765  // External could be made static
//-e788  // Enum constant not used within defaulted switch
//-e1065 // Symbol ... not declared as "C" conflicts with ...

// avoid significant prototype coercion (this is usually happening
// because the length of the string is given by an integer constant,
// while the argument is unsigned long):
-ecall(747,strncasecmp)
-ecall(747,strncpy)
-ecall(747,strncat)
-ecall(747,strncpy)
-ecall(747,strncmp)
-ecall(747,vsnprintf)
-ecall(747,snprintf)
-ecall(747,getcwd)
-ecall(747,strerror_r)

// ------------------------------------------------------------------
// turn off several warnings for memory functions, since they usually are false positive and clutter the output

// Suspicious truncation:
-emacro(647,BMSclearMemoryArray)
-emacro(647,BMSallocMemorySize)
-emacro(647,BMSallocClearMemoryArray)
-emacro(647,SCIPallocMemoryArray)
-emacro(647,SCIPallocBlockMemoryArray)
-emacro(647,SCIPreallocBlockMemoryArray)
-emacro(647,SCIPallocBufferArray)
-emacro(647,SCIPreallocBufferArray)
-emacro(647,SCIPfreeBlockMemoryArrayNull)
-emacro(647,SCIPduplicateBlockMemoryArray)
-emacro(647,SCIPallocCleanBufferArray)

// Avoid "Possible truncation of addition" - this might give interesting information, but clutters the output
-emacro(776,BMSmoveMemoryArray)
-emacro(776,BMSallocMemorySize)
-emacro(776,BMSclearMemoryArray)
-emacro(776,BMSallocMemoryArray)
-emacro(776,BMSfreeBlockMemoryArray)
-emacro(776,BMSallocBlockMemoryArray)
-emacro(776,BMSallocBufferMemoryArray)
-emacro(776,BMSreallocBlockMemoryArray)
-emacro(776,BMSreallocBufferMemoryArray)
-emacro(776,BMSduplicateBlockMemoryArray)
-emacro(776,BMSduplicateBufferMemoryArray)
-emacro(776,SCIPallocMemoryArray)
-emacro(776,SCIPallocBlockMemoryArray)
-emacro(776,SCIPreallocBlockMemoryArray)
-emacro(776,SCIPfreeBlockMemoryArrayNull)
-emacro(776,SCIPduplicateMemoryArray)
-emacro(776,SCIPallocClearBufferArray)

-ecall(776,SCIPhashmapInsert)
-ecall(776,SCIPhashmapExists)

// turn off unusual use of 'SYM'
-emacro(866,BMSallocBlockMemoryArray)
-emacro(866,BMSreallocBlockMemoryArray)
-emacro(866,BMSduplicateMemoryArray)
-emacro(866,BMSduplicateBlockMemoryArray)
-emacro(866,BMSfreeBlockMemoryArray)
-emacro(866,BMSfreeBlockMemoryArrayNull)
-emacro(866,SCIPallocBufferArray)
-emacro(866,SCIPduplicateBlockMemoryArray)
-emacro(866,SCIPreallocBlockMemoryArray)

// turn off "Suspicious cast" messages involving size_t in SCIPhashmap*
-ecall(571,SCIPhashmapInsert)
-ecall(571,SCIPhashmapGetImage)
-ecall(571,SCIPhashmapSetImage)
-ecall(571,SCIPhashmapExists)
-emacro(571,SCIPhashTwo)
-emacro(571,SCIPcombineTwoInt)
-emacro(571,SCIPcombineThreeInt)
-emacro(571,SCIPcombineFourInt)
-emacro(571,SCIPrealHashCode)
-emacro(571,SCIPpositiveRealHashCode)

// turn off messages for quad precision
-emacro(647,QUAD_ARRAY_SIZE)
-emacro(666,SCIPquadprecProdQD)
-emacro(666,SCIPquadprecSumQD)

// ------------------------------------------------------------------
// turn off some warnings about C++ classes:
-e1768    // Virtual function has an access different from the access in the base class
-e1784    // Symbol 'Symbol' previously declared as "C", compare with Location XX

-ecall(747, std::vector::operator[])  // Significant prototype coercion

--esym(750,_USE_MATH_DEFINES)

// do not break or truncate lines
-width(0,4)
